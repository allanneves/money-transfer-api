/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.Indexes;
import jooq.Keys;
import jooq.Public;
import jooq.tables.records.TransferRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transfer extends TableImpl<TransferRecord> {

    private static final long serialVersionUID = 1776153557;

    /**
     * The reference instance of <code>PUBLIC.transfer</code>
     */
    public static final Transfer TRANSFER = new Transfer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransferRecord> getRecordType() {
        return TransferRecord.class;
    }

    /**
     * The column <code>PUBLIC.transfer.id</code>.
     */
    public final TableField<TransferRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.transfer.origin_account</code>.
     */
    public final TableField<TransferRecord, Long> ORIGIN_ACCOUNT = createField("origin_account", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>PUBLIC.transfer.destination_account</code>.
     */
    public final TableField<TransferRecord, Long> DESTINATION_ACCOUNT = createField("destination_account", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>PUBLIC.transfer.amount</code>.
     */
    public final TableField<TransferRecord, BigDecimal> AMOUNT = createField("amount", org.jooq.impl.SQLDataType.DECIMAL(10, 2).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.transfer.currency</code>.
     */
    public final TableField<TransferRecord, String> CURRENCY = createField("currency", org.jooq.impl.SQLDataType.VARCHAR(3).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.transfer.date_time</code>.
     */
    public final TableField<TransferRecord, Timestamp> DATE_TIME = createField("date_time", org.jooq.impl.SQLDataType.TIMESTAMP.precision(1), this, "");

    /**
     * Create a <code>PUBLIC.transfer</code> table reference
     */
    public Transfer() {
        this(DSL.name("transfer"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.transfer</code> table reference
     */
    public Transfer(String alias) {
        this(DSL.name(alias), TRANSFER);
    }

    /**
     * Create an aliased <code>PUBLIC.transfer</code> table reference
     */
    public Transfer(Name alias) {
        this(alias, TRANSFER);
    }

    private Transfer(Name alias, Table<TransferRecord> aliased) {
        this(alias, aliased, null);
    }

    private Transfer(Name alias, Table<TransferRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Transfer(Table<O> child, ForeignKey<O, TransferRecord> key) {
        super(child, key, TRANSFER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_4);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TransferRecord, Long> getIdentity() {
        return Keys.IDENTITY_TRANSFER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TransferRecord> getPrimaryKey() {
        return Keys.PK_TRANSFER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TransferRecord>> getKeys() {
        return Arrays.<UniqueKey<TransferRecord>>asList(Keys.PK_TRANSFER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Transfer as(String alias) {
        return new Transfer(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Transfer as(Name alias) {
        return new Transfer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transfer rename(String name) {
        return new Transfer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transfer rename(Name name) {
        return new Transfer(name, null);
    }
}
